from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database import database as db
from create import bot
import os

ADMIN_ID = {int(admin_id) for admin_id in os.getenv("ADMIN_ID").split(',')}


# Admin panel start
async def admin_start(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in ADMIN_ID:
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚¨ÜÔ∏è", callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å"), InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚¨áÔ∏è", callback_data="–£–¥–∞–ª–∏—Ç—å"))
        await bot.send_message(message.from_user.id, text=f"{message.from_user.first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=main_kb)

async def cal_admin_start(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if callback.from_user.id in ADMIN_ID:
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚¨ÜÔ∏è", callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å"), InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚¨áÔ∏è", callback_data="–£–¥–∞–ª–∏—Ç—å"))
        await callback.message.edit_text(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ü§üüèøü•¥", reply_markup=main_kb)


# Upload file
class AddFile(StatesGroup):
    file = State()
    description = State()

async def admin_upload_file(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if callback.from_user.id in ADMIN_ID:
        upload_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        await callback.message.edit_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ ü•∫", reply_markup=upload_kb)
        await AddFile.file.set()

async def admin_upload_file_message(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_ID:
        file_id = message.document.file_id
        file_name = message.document.file_name
        print(message.document.mime_type)
        if message.document.mime_type == 'application/pdf':
            main_kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚¨ÜÔ∏è", callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å"), InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚¨áÔ∏è", callback_data="–£–¥–∞–ª–∏—Ç—å"))
            if await db.file_exists(file_name):
                await message.answer(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üò¨", reply_markup=main_kb)
                await state.finish()
            else:
                upload_kb = InlineKeyboardMarkup() \
                .add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
                await AddFile.description.set()
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ü•∫", reply_markup=upload_kb)
            await state.update_data(file_id=file_id, file_name=file_name)
        else:
            await state.finish()
            main_kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚¨ÜÔ∏è", callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å"), InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚¨áÔ∏è", callback_data="–£–¥–∞–ª–∏—Ç—å"))
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ pdf —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ üôè", reply_markup= main_kb)

async def admin_upload_file_description(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_ID:
        description = message.text
        data = await state.get_data()
        file_id = data.get('file_id')
        file_name = data.get('file_name')
        await db.add_file(file_id, file_name, description)
        main_kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚¨ÜÔ∏è", callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å"), InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚¨áÔ∏è", callback_data="–£–¥–∞–ª–∏—Ç—å"))
        await message.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ‚ù§Ô∏è", reply_markup=main_kb)
        await state.finish()


# Delete file
class DeleteFile(StatesGroup):
    name = State()

async def admin_delete_file(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if callback.from_user.id in ADMIN_ID:
        delete_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì–ª–∞–≤–Ω–∞—è"))
        await callback.message.edit_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ü•∫", reply_markup=delete_kb)
        await DeleteFile.name.set()

async def admin_delete_file_message(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_ID:
        file_name = message.text
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚¨ÜÔ∏è", callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å"), InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚¨áÔ∏è", callback_data="–£–¥–∞–ª–∏—Ç—å"))
        if await db.file_exists(file_name):
            await db.delete_file(file_name)
            await message.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üíî", reply_markup=main_kb)
        else:
            await message.answer(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{file_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üò¨", reply_markup=main_kb)
        await state.finish()


def register_handlers_admin(dp: Dispatcher):
    # Menu handlers
    dp.register_message_handler(admin_start, commands=['admin'], state='*')
    dp.register_callback_query_handler(cal_admin_start, lambda c:c.data == "–ì–ª–∞–≤–Ω–∞—è", state='*')
   
    # Upload handlers
    dp.register_callback_query_handler(admin_upload_file, lambda c: c.data == "–ó–∞–≥—Ä—É–∑–∏—Ç—å")
    dp.register_message_handler(admin_upload_file_message, content_types=['document'], state=AddFile.file)
    dp.register_message_handler(admin_upload_file_description, state=AddFile.description)
    
    # Delete handlers
    dp.register_callback_query_handler(admin_delete_file, lambda c: c.data == "–£–¥–∞–ª–∏—Ç—å")
    dp.register_message_handler(admin_delete_file_message, state=DeleteFile.name)
