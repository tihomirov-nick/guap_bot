from datetime import datetime, time
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InlineQueryResultCachedDocument
import sqlite3 as sq
import hashlib
from collections import defaultdict
import requests
from bs4 import BeautifulSoup

from database import database
from create import bot

def format_schedule(text: str, day: str) -> str:
    lines = text.split('\n')
    formatted_text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n‚òÄÔ∏è {day}\n'
    for line in lines:
        if '–ø–∞—Ä–∞' in line:
            time = line.split(')')[0] + ')'
            formatted_text += f'\nüïò {time}\n'
        else:
            formatted_text += f'{line}\n'
    return formatted_text


def get_rasp(send_day, group):
    url = f'https://guap.ru/rasp'
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')
    option = soup.find('option', string=str(group))
    value = option['value']
    url = f'https://guap.ru/rasp/?g={value}'
    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')

    schedule = defaultdict(list)
    current_day = None

    found_h3 = False
    for tag in soup.find_all(['h3', 'h4', 'span']):
        if tag.name == 'h3':
            found_h3 = True
            current_day = tag.text
        elif found_h3:
            schedule[current_day].append(tag.text)

    text = ''

    for day, lessons in schedule.items():
        if str(day) == str(send_day):
            for lesson in lessons:
                text += '\n' + lesson

    return text

async def command_start(message: types.Message, state: FSMContext):
    await state.finish()
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞", callback_data="–ì—Ä—É–ø–ø–∞"), InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) \
        .add(InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="–†–∞—Å—Å—ã–ª–∫–∞"), InlineKeyboardButton(text=f"üîç –ü–æ–∏—Å–∫", switch_inline_query_current_chat="–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞"))
    await bot.send_message(message.from_user.id, text=f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π.\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –¥–∞—Ç–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.\n\n–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –£–¥–∞—á–∏ —Å —Ç–≤–æ–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏!", reply_markup=main_kb)


async def cal_command_start(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞", callback_data="–ì—Ä—É–ø–ø–∞"), InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) \
        .add(InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="–†–∞—Å—Å—ã–ª–∫–∞"), InlineKeyboardButton(text=f"üîç –ü–æ–∏—Å–∫", switch_inline_query_current_chat="–ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞"))
    await callback.message.edit_text(text=f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π.\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –¥–∞—Ç–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.\n\n–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –£–¥–∞—á–∏ —Å —Ç–≤–æ–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏!", reply_markup=main_kb)


# Inline
async def inline_query(query: types.InlineQuery):
    base = sq.connect('data.db')
    cur = base.cursor()
    search_query = query.query
    if search_query != '':
        cur.execute("SELECT * FROM files WHERE name LIKE ? OR description LIKE ?", ('%' + search_query + '%', '%' + search_query + '%',))
        results = []
        for row in cur.fetchall():
            file_id = row[1]
            file_name = row[2]
            description = row[3]
            result_id = hashlib.md5(file_id.encode()).hexdigest()  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            results.append(InlineQueryResultCachedDocument(
                id=result_id,
                title=file_name,
                description=description,
                document_file_id=file_id,
            ))
        if len(results) > 0:
            await query.answer(results)
        else:
            await query.answer(
                results=[InlineQueryResultArticle(
                    id='no_results',
                    title='–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤',
                    description='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã',
                    input_message_content=types.InputTextMessageContent(message_text='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã')
                )]
            )

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
async def rasp(callback_query: types.CallbackQuery):
    days_of_week = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    tomorrow = datetime.now()
    day_of_week = days_of_week[tomorrow.weekday()]
    group = await database.get_group_by_id(callback_query.from_user.id)
    rasp = get_rasp(day_of_week, group)
    formatted_schedule = format_schedule(rasp, day_of_week)
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–î–æ–º–æ–π"))
    await callback_query.message.edit_text(text=formatted_schedule, reply_markup=main_kb)


# –†–∞—Å—Å—ã–ª–∫–∞
async def start_cmd_handler(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    for hour in range(20,24):
        send_time = time(hour, 0)
        keyboard.add(InlineKeyboardButton(send_time.strftime('%H:%M'), callback_data=send_time.strftime('%H:%M')))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–î–æ–º–æ–π"))
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ —è –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.", reply_markup=keyboard)


async def callback_query_handler(callback_query: types.CallbackQuery):
    if callback_query.data == '–†–∞—Å—Å—ã–ª–∫–∞':
        return
    try:
        send_time = datetime.strptime(callback_query.data, '%H:%M').time()
        conn = sq.connect('data.db')
        c = conn.cursor()
        c.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, send_time TEXT)')
        conn.commit()
        c.execute('INSERT OR REPLACE INTO users VALUES (?, ?)', (callback_query.from_user.id, send_time.strftime('%H:%M')))
        conn.commit()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, f"–û–∫–µ–π, —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {send_time.strftime('%H:%M')}. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—ã–ª–∫–∞' –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        pass

# –ì—Ä—É–ø–ø—ã
async def group(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    group = await database.get_group(callback.from_user.id)
    if group:
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–î–æ–º–æ–π"))
        await callback.message.edit_text(text=f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {await database.get_group(callback.from_user.id)}", reply_markup=main_kb)
    else:
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="üë• –í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É", callback_data="–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É"), InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–î–æ–º–æ–π"))
        await callback.message.edit_text(text="–ü–æ—Ö–æ–∂–µ —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ! –£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!", reply_markup=main_kb)


class AddGroup(StatesGroup):
    group = State()

async def set_group(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì—Ä—É–ø–ø–∞"))
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=main_kb)
    await AddGroup.group.set()

async def set_group_message(message: types.Message, state: FSMContext):
    group = message.text
    await database.set_group_in_db(message.from_user.id, group)
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), InlineKeyboardButton(text="üè° –î–æ–º–æ–π", callback_data="–î–æ–º–æ–π"))
    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!\n–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {await database.get_group(message.from_user.id)}", reply_markup=main_kb)
    await state.finish()


class ChangeGroup(StatesGroup):
    group = State()

async def change_group(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    back_kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì—Ä—É–ø–ø–∞"))
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=back_kb)
    await ChangeGroup.group.set()

async def change_group_message(message: types.Message, state: FSMContext):
    group = message.text
    await database.change_group_in_db(message.from_user.id, group)
    main_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"),
        InlineKeyboardButton(text="üè° –î–æ–º–æ–π", callback_data="–î–æ–º–æ–π")
    )
    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!\n–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {await database.get_group(message.from_user.id)}", reply_markup=main_kb)
    await state.finish()

def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'], state='*')
    dp.register_callback_query_handler(cal_command_start, lambda c: c.data == "–î–æ–º–æ–π", state='*')
    
    #–ì—Ä—É–ø–ø—ã
    dp.register_callback_query_handler(group, lambda c: c.data == "–ì—Ä—É–ø–ø–∞", state='*')
    dp.register_callback_query_handler(set_group, lambda c: c.data == "–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É")
    dp.register_message_handler(set_group_message, state=AddGroup.group)

    dp.register_callback_query_handler(change_group, lambda c: c.data == "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
    dp.register_message_handler(change_group_message, state=ChangeGroup.group)

    #Inline
    dp.register_inline_handler(inline_query)

    #–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    dp.register_callback_query_handler(rasp, lambda c: c.data == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", state='*')


    #–†–∞—Å—Å—ã–ª–∫–∞
    dp.register_callback_query_handler(start_cmd_handler, lambda c: c.data == '–†–∞—Å—Å—ã–ª–∫–∞', state='*')
    dp.register_callback_query_handler(callback_query_handler, state='*')

