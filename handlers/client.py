from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import asyncio
import sqlite3
from datetime import datetime, time

from database import database
from create import bot


async def command_start(message: types.Message, state: FSMContext):
    await state.finish()
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞", callback_data="–ì—Ä—É–ø–ø–∞"), InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) \
        .add(InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="–†–∞—Å—Å—ã–ª–∫–∞"), InlineKeyboardButton(text=f"üîç –ü–æ–∏—Å–∫", callback_data="–ü–æ–∏—Å–∫"))
    await bot.send_message(message.from_user.id, text=f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π.\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –¥–∞—Ç–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.\n\n–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –£–¥–∞—á–∏ —Å —Ç–≤–æ–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏!", reply_markup=main_kb)


async def cal_command_start(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞", callback_data="–ì—Ä—É–ø–ø–∞"), InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) \
        .add(InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data="–†–∞—Å—Å—ã–ª–∫–∞"), InlineKeyboardButton(text=f"üîç –ü–æ–∏—Å–∫", callback_data="–ü–æ–∏—Å–∫"))
    await callback.message.edit_text(text=f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π.\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –¥–∞—Ç–∞—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.\n\n–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –£–¥–∞—á–∏ —Å —Ç–≤–æ–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏!", reply_markup=main_kb)


# Groups
async def group(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    group = await database.get_group(callback.from_user.id)
    if group:
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), InlineKeyboardButton(text="üè° –î–æ–º–æ–π", callback_data="–î–æ–º–æ–π"))
        await callback.message.edit_text(text=f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {await database.get_group(callback.from_user.id)}", reply_markup=main_kb)
    else:
        main_kb = InlineKeyboardMarkup() \
            .add(InlineKeyboardButton(text="üë• –í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É", callback_data="–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É"), InlineKeyboardButton(text="üè° –î–æ–º–æ–π", callback_data="–î–æ–º–æ–π"))
        await callback.message.edit_text(text="–ü–æ—Ö–æ–∂–µ —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ! –£ —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!", reply_markup=main_kb)


class AddGroup(StatesGroup):
    group = State()


async def set_group(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì—Ä—É–ø–ø–∞"))
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=main_kb)
    await AddGroup.group.set()


async def set_group_message(message: types.Message, state: FSMContext):
    group = message.text
    await database.set_group_in_db(message.from_user.id, group)
    main_kb = InlineKeyboardMarkup() \
        .add(InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"), InlineKeyboardButton(text="üè° –î–æ–º–æ–π", callback_data="–î–æ–º–æ–π"))
    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!\n–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {await database.get_group(message.from_user.id)}", reply_markup=main_kb)
    await state.finish()


class ChangeGroup(StatesGroup):
    group = State()


async def change_group(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    back_kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="–ì—Ä—É–ø–ø–∞"))
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=back_kb)
    await ChangeGroup.group.set()


async def change_group_message(message: types.Message, state: FSMContext):
    group = message.text
    await database.change_group_in_db(message.from_user.id, group)
    main_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"),
        InlineKeyboardButton(text="üè° –î–æ–º–æ–π", callback_data="–î–æ–º–æ–π")
    )
    await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!\n–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {await database.get_group(message.from_user.id)}", reply_markup=main_kb)
    await state.finish()


# Sending
async def start_cmd_handler(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    for hour in range(24):
        for minute in [0, 30]:
            send_time = time(hour, minute)
            keyboard.add(InlineKeyboardButton(send_time.strftime('%H:%M'), callback_data=send_time.strftime('%H:%M')))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ —è –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.", reply_markup=keyboard)


async def callback_query_handler(callback_query: types.CallbackQuery):
    if callback_query.data == '–†–∞—Å—Å—ã–ª–∫–∞':
        return
    try:
        send_time = datetime.strptime(callback_query.data, '%H:%M').time()
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, send_time TEXT)')
        conn.commit()
        c.execute('INSERT OR REPLACE INTO users VALUES (?, ?)', (callback_query.from_user.id, send_time.strftime('%H:%M')))
        conn.commit()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, f"–û–∫–µ–π, —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {send_time.strftime('%H:%M')}. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—ã–ª–∫–∞' –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        pass


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'], state='*')
    dp.register_callback_query_handler(cal_command_start, lambda c: c.data == "–î–æ–º–æ–π", state='*')

    dp.register_callback_query_handler(group, lambda c: c.data == "–ì—Ä—É–ø–ø–∞", state='*')
    dp.register_callback_query_handler(set_group, lambda c: c.data == "–í–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É")
    dp.register_message_handler(set_group_message, state=AddGroup.group)

    dp.register_callback_query_handler(change_group, lambda c: c.data == "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
    dp.register_message_handler(change_group_message, state=ChangeGroup.group)

    dp.register_callback_query_handler(start_cmd_handler, lambda c: c.data == '–†–∞—Å—Å—ã–ª–∫–∞', state='*')
    dp.register_callback_query_handler(callback_query_handler, state='*')
